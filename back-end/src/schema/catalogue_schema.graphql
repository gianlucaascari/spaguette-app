
type Recipe {
  id: ID!
  user: User
  name: String!
  description: String
  stepsLink: String
  ingredients: [IngredientQuantity!]!
}

type IngredientQuantity {
  ingredient: Ingredient!
  quantity: Float!
}

input RecipeInput {
  name: String!
  description: String
  stepsLink: String
  ingredients: [InputIngredientQuantity!]!
}

input InputIngredientQuantity {
  ingredientID: ID!
  quantity: Float!
}

type Ingredient {
  id: ID!
  user: User
  name: String!
  unityOfMeasure: UnityOfMeasure!
}

input IngredientInput {
  name: String!
  unityOfMeasure: UnityOfMeasure!
}

enum UnityOfMeasure {
  GR
  ML
  PC
}

type Query {
  # ingredients
  getMyIngredients: [Ingredient!]!

  # recipes
  getMyRecipes: [Recipe!]!
  getRecipe(recipeID: ID!): Recipe!
}

type Mutation {
  # ingredients
  addIngredient(input: IngredientInput): Ingredient!
  updIngredient(id: ID!, input: IngredientInput): Ingredient!
  remIngredient(id: ID!): Boolean!

  # recipes 
  addRecipe(input: RecipeInput!): Recipe!
  updRecipe(id: ID!, input: RecipeInput!): Recipe!
  remRecipe(id: ID!): Boolean!

  # util
  utilRemIngredients(subString: String): Int!
  utilRemRecipes(subString: String!): Int!
}
